Starting on 9-11 at 16:28:14

Question q1
===========

*** PASS: test_cases/q1/graph_backtrack.test
*** 	solution:		['1:A->C', '0:C->G']
*** 	expanded_states:	['A', 'B', 'C']
*** FAIL: test_cases/q1/graph_bfs_vs_dfs.test
*** 	graph:
*** 	    /-- B
*** 	    |   ^
*** 	    |   |
*** 	    |  *A -->[G]
*** 	    |   |     ^
*** 	    |   V     |
*** 	    \-->D ----/
*** 	    
*** 	    A is the start state, G is the goal.  Arrows
*** 	    mark possible transitions
*** 	student solution:		['1:A->G']
*** 	student expanded_states:	['A', 'B']
*** 
*** 	correct solution:		['2:A->D', '0:D->G']
*** 	correct expanded_states:	['A', 'D']
*** 	correct rev_solution:		['0:A->B', '0:B->D', '0:D->G']
*** 	correct rev_expanded_states:	['A', 'B', 'D']
*** PASS: test_cases/q1/graph_infinite.test
*** 	solution:		['0:A->B', '1:B->C', '1:C->G']
*** 	expanded_states:	['A', 'B', 'C']
*** FAIL: test_cases/q1/graph_manypaths.test
*** 	graph:
*** 	        B1          E1
*** 	       ^  \        ^  \
*** 	      /    V      /    V
*** 	    *A --> C --> D --> F --> [G]
*** 	      \    ^      \    ^
*** 	       V  /        V  /
*** 	        B2          E2
*** 	    
*** 	    A is the start state, G is the goal.  Arrows mark 
*** 	    possible state transitions.  This graph has multiple
*** 	    paths to the goal, where nodes with the same state 
*** 	    are added to the fringe multiple times before they
*** 	    are expanded.
*** 	student solution:		['1:A->C', '0:C->D', '1:D->F', '0:F->G']
*** 	student expanded_states:	['A', 'B1', 'C', 'D', 'E1', 'F']
*** 
*** 	correct solution:		['2:A->B2', '0:B2->C', '0:C->D', '2:D->E2', '0:E2->F', '0:F->G']
*** 	correct expanded_states:	['A', 'B2', 'C', 'D', 'E2', 'F']
*** 	correct rev_solution:		['0:A->B1', '0:B1->C', '0:C->D', '0:D->E1', '0:E1->F', '0:F->G']
*** 	correct rev_expanded_states:	['A', 'B1', 'C', 'D', 'E1', 'F']
*** FAIL: test_cases/q1/pacman_1.test
*** Solution not correct.
*** 	student solution length: 244
*** 	student solution:
South South West West West West South South East East East East South
South West West West West South South East East East East South South
West West West West South South East East East East South South South
West West West West West West West North North North North North North
North North West West West West West West West North North North East
East East East South East East East North North North West West North
North West West West West West West West West West West West West West
West West West West West West West West West West West South South
South South South South South South South East East East North North
North North North North North East East South South South South South
South East East North North North North North North East East South
South South South East East North North North North East East East
East East South South West West West South South East East East South
South West West West West West West South South West West West West
West South West West West West West South South East East East East
East East East North East East East East East North North East East
East East East East North East East East East East South South West
West West South West West West West West West South South West West
West West West South West West West West West West West West West
*** 
*** 	correct solution length: 130
*** 	correct (reversed) solution length: 246
*** 	correct solution:
West West West West West West West West West West West West West West
West West West West West West West West West West West West West West
West West West West West South South South South South South South
South South East East East North North North North North North North
East East South South South South South South East East North North
North North North North East East South South South South East East
North North East East East East East East East East South South South
East East East East East East East South South South South South South
South West West West West West West West West West West West West West
West West West West South West West West West West West West West West
*** 	correct (reversed) solution:
South South West West West West South South East East East East South
South West West West West South South East East East East South South
West West West West South South South East North East East East South
South South West West West West West West West North North North North
North North North North West West West West West West West North North
North East East East East South East East East North North North West
West North North West West West West West West West West West West
West West West West West West West West West West West West West West
South South South South South South South South South East East East
North North North North North North North East East South South South
South South South East East North North North North North North East
East South South South South East East North North North North East
East East East East South South West West West South South East East
East South South West West West West West West South South West West
West West West South West West West West West South South East East
East East East East East North East East East East East North North
East East East East East East North East East East East East South
South West West West South West West West West West West South South
West West West West West South West West West West West West West West
West
*** Tests failed.

### Question q1: 0/3 ###


Question q2
===========

*** PASS: test_cases/q2/graph_backtrack.test
*** 	solution:		['1:A->C', '0:C->G']
*** 	expanded_states:	['A', 'B', 'C', 'D']
*** PASS: test_cases/q2/graph_bfs_vs_dfs.test
*** 	solution:		['1:A->G']
*** 	expanded_states:	['A', 'B']
*** PASS: test_cases/q2/graph_infinite.test
*** 	solution:		['0:A->B', '1:B->C', '1:C->G']
*** 	expanded_states:	['A', 'B', 'C']
*** PASS: test_cases/q2/graph_manypaths.test
*** 	solution:		['1:A->C', '0:C->D', '1:D->F', '0:F->G']
*** 	expanded_states:	['A', 'B1', 'C', 'B2', 'D', 'E1', 'F', 'E2']
*** PASS: test_cases/q2/pacman_1.test
*** 	pacman layout:		mediumMaze
*** 	solution length: 68
*** 	nodes expanded:		269

### Question q2: 3/3 ###


Question q3
===========

*** PASS: test_cases/q3/graph_backtrack.test
*** 	solution:		['1:A->C', '0:C->G']
*** 	expanded_states:	['A', 'B', 'C', 'D']
*** PASS: test_cases/q3/graph_bfs_vs_dfs.test
*** 	solution:		['1:A->G']
*** 	expanded_states:	['A', 'B']
*** PASS: test_cases/q3/graph_infinite.test
*** 	solution:		['0:A->B', '1:B->C', '1:C->G']
*** 	expanded_states:	['A', 'B', 'C']
*** PASS: test_cases/q3/graph_manypaths.test
*** 	solution:		['1:A->C', '0:C->D', '1:D->F', '0:F->G']
*** 	expanded_states:	['A', 'B1', 'C', 'B2', 'D', 'E1', 'F', 'E2']
*** PASS: test_cases/q3/ucs_0_graph.test
*** 	solution:		['Right', 'Down', 'Down']
*** 	expanded_states:	['A', 'B', 'D', 'C', 'G']
*** PASS: test_cases/q3/ucs_1_problemC.test
*** 	pacman layout:		mediumMaze
*** 	solution length: 68
*** 	nodes expanded:		269
*** PASS: test_cases/q3/ucs_2_problemE.test
*** 	pacman layout:		mediumMaze
*** 	solution length: 74
*** 	nodes expanded:		260
*** PASS: test_cases/q3/ucs_3_problemW.test
*** 	pacman layout:		mediumMaze
*** 	solution length: 152
*** 	nodes expanded:		173
*** PASS: test_cases/q3/ucs_4_testSearch.test
*** 	pacman layout:		testSearch
*** 	solution length: 7
*** 	nodes expanded:		14
*** FAIL: test_cases/q3/ucs_5_goalAtDequeue.test
*** 	graph:
*** 	        1      1      1
*** 	    *A ---> B ---> C ---> [G]
*** 	     |                     ^
*** 	     |         10          |
*** 	     \---------------------/
*** 	    
*** 	    A is the start state, G is the goal.  Arrows mark possible state 
*** 	    transitions.  The number next to the arrow is the cost of that transition.
*** 	    
*** 	    If you fail this test case, you may be incorrectly testing if a node is a goal 
*** 	    before adding it into the queue, instead of testing when you remove the node 
*** 	    from the queue.  See the algorithm pseudocode in lecture.
*** 	student solution:		['0:A->G']
*** 	student expanded_states:	['A', 'B', 'C']
*** 
*** 	correct solution:		['1:A->B', '0:B->C', '0:C->G']
*** 	correct expanded_states:	['A', 'B', 'C']
*** 	correct rev_solution:		['1:A->B', '0:B->C', '0:C->G']
*** 	correct rev_expanded_states:	['A', 'B', 'C']
*** Tests failed.

### Question q3: 0/3 ###


Question q4
===========

*** Method not implemented: aStarSearch at line 228 of search.py
*** FAIL: Terminated with a string exception.

### Question q4: 0/3 ###


Question q5
===========

*** Method not implemented: getStartState at line 296 of searchAgents.py
*** FAIL: Terminated with a string exception.

### Question q5: 0/3 ###


Question q6
===========

*** NOTE: Make sure to complete Question q4 before working on Question q6,
*** because Question q6 builds upon your answer for Question q4.


Question q7
===========

*** NOTE: Make sure to complete Question q4 before working on Question q7,
*** because Question q7 builds upon your answer for Question q4.


Question q8
===========

[SearchAgent] using function depthFirstSearch
[SearchAgent] using problem type PositionSearchProblem
*** Method not implemented: findPathToClosestDot at line 486 of searchAgents.py
*** FAIL: Terminated with a string exception.

### Question q8: 0/3 ###


Finished at 16:28:14

Provisional grades
==================
Question q1: 0/3
Question q2: 3/3
Question q3: 0/3
Question q4: 0/3
Question q5: 0/3
Question q6: 0/3
Question q7: 0/4
Question q8: 0/3
------------------
Total: 3/25

Your grades are NOT yet registered.  To register your grades, make sure
to follow your instructor's guidelines to receive credit on your project.

